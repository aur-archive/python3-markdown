--- ./setup.py (original)
+++ ./setup.py (refactored)
@@ -20,9 +20,9 @@
                 f = file(bat_path, 'w')
                 f.write(bat_str)
                 f.close()
-                print 'Created:', bat_path
-            except Exception, e:
-                print 'ERROR: Unable to create %s: %s' % (bat_path, e)
+                print('Created:', bat_path)
+            except Exception as e:
+                print('ERROR: Unable to create %s: %s' % (bat_path, e))
 
 data = dict(
     name =          'Markdown',
--- ./markdown/__init__.py (original)
+++ ./markdown/__init__.py (refactored)
@@ -74,8 +74,8 @@
 DOC_TAG = "div"     # Element used to wrap document - later removed
 
 # Placeholders
-STX = u'\u0002'  # Use STX ("Start of text") for start-of-placeholder
-ETX = u'\u0003'  # Use ETX ("End of text") for end-of-placeholder
+STX = '\u0002'  # Use STX ("Start of text") for start-of-placeholder
+ETX = '\u0003'  # Use ETX ("End of text") for end-of-placeholder
 INLINE_PLACEHOLDER_PREFIX = STX+"klzzwxh:"
 INLINE_PLACEHOLDER = INLINE_PLACEHOLDER_PREFIX + "%s" + ETX
 AMP_SUBSTITUTE = STX+"amp"+ETX
@@ -86,11 +86,11 @@
 -----------------------------------------------------------------------------
 """
 
-RTL_BIDI_RANGES = ( (u'\u0590', u'\u07FF'),
+RTL_BIDI_RANGES = ( ('\u0590', '\u07FF'),
                      # Hebrew (0590-05FF), Arabic (0600-06FF),
                      # Syriac (0700-074F), Arabic supplement (0750-077F),
                      # Thaana (0780-07BF), Nko (07C0-07FF).
-                    (u'\u2D30', u'\u2D7F'), # Tifinagh
+                    ('\u2D30', '\u2D7F'), # Tifinagh
                     )
 
 
@@ -109,7 +109,7 @@
         if level > WARN:
             sys.exit(0)
     elif level > WARN:
-        raise MarkdownException, text
+        raise MarkdownException(text)
     else:
         warnings.warn(text, MarkdownWarning)
 
@@ -123,7 +123,7 @@
 =============================================================================
 """
 
-class AtomicString(unicode):
+class AtomicString(str):
     """A string which should not be further processed."""
     pass
 
@@ -158,14 +158,14 @@
 
 """
 
-import preprocessors
-import blockprocessors
-import treeprocessors
-import inlinepatterns
-import postprocessors
-import blockparser
-import etree_loader
-import odict
+from . import preprocessors
+from . import blockprocessors
+from . import treeprocessors
+from . import inlinepatterns
+from . import postprocessors
+from . import blockparser
+from . import etree_loader
+from . import odict
 
 # Extensions should use "markdown.etree" instead of "etree" (or do `from
 # markdown import etree`).  Do not import it by yourself.
@@ -173,7 +173,7 @@
 etree = etree_loader.importETree()
 
 # Adds the ability to output html4
-import html4
+from . import html4
 
 
 class Markdown:
@@ -325,12 +325,12 @@
 
         """
         for ext in extensions:
-            if isinstance(ext, basestring):
+            if isinstance(ext, str):
                 ext = load_extension(ext, configs.get(ext, []))
             if isinstance(ext, Extension):
                 try:
                     ext.extendMarkdown(self, globals())
-                except NotImplementedError, e:
+                except NotImplementedError as e:
                     message(ERROR, e)
             else:
                 message(ERROR, 'Extension "%s.%s" must be of type: "markdown.Extension".' \
@@ -356,7 +356,7 @@
             self.serializer = self.output_formats[format.lower()]
         except KeyError:
             message(CRITICAL, 'Invalid Output Format: "%s". Use one of %s.' \
-                               % (format, self.output_formats.keys()))
+                               % (format, list(self.output_formats.keys())))
 
     def convert(self, source):
         """
@@ -370,12 +370,12 @@
 
         # Fixup the source text
         if not source.strip():
-            return u""  # a blank unicode string
+            return ""  # a blank unicode string
         try:
-            source = unicode(source)
+            source = str(source)
         except UnicodeDecodeError:
             message(CRITICAL, 'UnicodeDecodeError: Markdown only accepts unicode or ascii input.')
-            return u""
+            return ""
 
         source = source.replace(STX, "").replace(ETX, "")
         source = source.replace("\r\n", "\n").replace("\r", "\n") + "\n\n"
@@ -384,14 +384,14 @@
 
         # Split into lines and run the line preprocessors.
         self.lines = source.split("\n")
-        for prep in self.preprocessors.values():
+        for prep in list(self.preprocessors.values()):
             self.lines = prep.run(self.lines)
 
         # Parse the high-level elements.
         root = self.parser.parseDocument(self.lines).getroot()
 
         # Run the tree-processors
-        for treeprocessor in self.treeprocessors.values():
+        for treeprocessor in list(self.treeprocessors.values()):
             newRoot = treeprocessor.run(root)
             if newRoot:
                 root = newRoot
@@ -412,7 +412,7 @@
                     message(CRITICAL, 'Failed to strip top level tags.')
 
         # Run the text post-processors
-        for pp in self.postprocessors.values():
+        for pp in list(self.postprocessors.values()):
             output = pp.run(output)
 
         return output.strip()
@@ -443,13 +443,13 @@
         input_file = codecs.open(input, mode="r", encoding=encoding)
         text = input_file.read()
         input_file.close()
-        text = text.lstrip(u'\ufeff') # remove the byte-order mark
+        text = text.lstrip('\ufeff') # remove the byte-order mark
 
         # Convert
         html = self.convert(text)
 
         # Write to file or stdout
-        if isinstance(output, (str, unicode)):
+        if isinstance(output, str):
             output_file = codecs.open(output, "w", encoding=encoding)
             output_file.write(html)
             output_file.close()
@@ -482,7 +482,7 @@
 
     def getConfigInfo(self):
         """ Return all config settings as a list of tuples. """
-        return [(key, self.config[key][1]) for key in self.config.keys()]
+        return [(key, self.config[key][1]) for key in list(self.config.keys())]
 
     def setConfig(self, key, value):
         """ Set a config setting for `key` with the given `value`. """
@@ -501,8 +501,8 @@
         * md_globals: Global variables in the markdown module namespace.
 
         """
-        raise NotImplementedError, 'Extension "%s.%s" must define an "extendMarkdown"' \
-            'method.' % (self.__class__.__module__, self.__class__.__name__)
+        raise NotImplementedError('Extension "%s.%s" must define an "extendMarkdown"' \
+            'method.' % (self.__class__.__module__, self.__class__.__name__))
 
 
 def load_extension(ext_name, configs = []):
@@ -542,7 +542,7 @@
     # If the module is loaded successfully, we expect it to define a
     # function called makeExtension()
     try:
-        return module.makeExtension(configs.items())
+        return module.makeExtension(list(configs.items()))
     except AttributeError:
         message(CRITICAL, "Failed to initiate extension '%s'" % ext_name)
 
--- ./markdown/blockparser.py (original)
+++ ./markdown/blockparser.py (refactored)
@@ -87,7 +87,7 @@
 
         """
         while blocks:
-           for processor in self.blockprocessors.values():
+           for processor in list(self.blockprocessors.values()):
                if processor.test(parent, blocks[0]):
                    processor.run(parent, blocks)
                    break
--- ./markdown/commandline.py (original)
+++ ./markdown/commandline.py (refactored)
@@ -39,7 +39,7 @@
                     'extensions': [],
                     'encoding': None }, CRITICAL
         else:
-            print OPTPARSE_WARNING
+            print(OPTPARSE_WARNING)
             return None, None
 
     parser = optparse.OptionParser(usage="%prog INPUTFILE [options]")
--- ./markdown/html4.py (original)
+++ ./markdown/html4.py (refactored)
@@ -141,7 +141,7 @@
                 _serialize_html(write, e, encoding, qnames, None)
         else:
             write("<" + tag)
-            items = elem.items()
+            items = list(elem.items())
             if items or namespaces:
                 items.sort() # lexical order
                 for k, v in items:
@@ -154,7 +154,7 @@
                     # FIXME: handle boolean attributes
                     write(" %s=\"%s\"" % (qnames[k], v))
                 if namespaces:
-                    items = namespaces.items()
+                    items = list(namespaces.items())
                     items.sort(key=lambda x: x[1]) # sort on prefix
                     for v, k in items:
                         if k:
@@ -247,12 +247,12 @@
         tag = elem.tag
         if isinstance(tag, QName) and tag.text not in qnames:
             add_qname(tag.text)
-        elif isinstance(tag, basestring):
+        elif isinstance(tag, str):
             if tag not in qnames:
                 add_qname(tag)
         elif tag is not None and tag is not Comment and tag is not PI:
             _raise_serialization_error(tag)
-        for key, value in elem.items():
+        for key, value in list(elem.items()):
             if isinstance(key, QName):
                 key = key.text
             if key not in qnames:
--- ./markdown/inlinepatterns.py (original)
+++ ./markdown/inlinepatterns.py (refactored)
@@ -43,12 +43,12 @@
 
 import markdown
 import re
-from urlparse import urlparse, urlunparse
+from urllib.parse import urlparse, urlunparse
 import sys
 if sys.version >= "3.0":
     from html import entities as htmlentitydefs
 else:
-    import htmlentitydefs
+    import html.entities
 
 """
 The actual regular expressions for patterns
@@ -354,7 +354,7 @@
 
         def codepoint2name(code):
             """Return entity definition by code, or the code if not defined."""
-            entity = htmlentitydefs.codepoint2name.get(code)
+            entity = html.entities.codepoint2name.get(code)
             if entity:
                 return "%s%s;" % (markdown.AMP_SUBSTITUTE, entity)
             else:
--- ./markdown/odict.py (original)
+++ ./markdown/odict.py (refactored)
@@ -15,7 +15,7 @@
             data = {}
         super(OrderedDict, self).__init__(data)
         if isinstance(data, dict):
-            self.keyOrder = data.keys()
+            self.keyOrder = list(data.keys())
         else:
             self.keyOrder = []
             for key, value in data:
@@ -25,7 +25,7 @@
     def __deepcopy__(self, memo):
         from copy import deepcopy
         return self.__class__([(key, deepcopy(value, memo))
-                               for key, value in self.iteritems()])
+                               for key, value in self.items()])
 
     def __setitem__(self, key, value):
         super(OrderedDict, self).__setitem__(key, value)
@@ -55,7 +55,7 @@
         return result
 
     def items(self):
-        return zip(self.keyOrder, self.values())
+        return list(zip(self.keyOrder, list(self.values())))
 
     def iteritems(self):
         for key in self.keyOrder:
@@ -75,7 +75,7 @@
             yield super(OrderedDict, self).__getitem__(key)
 
     def update(self, dict_):
-        for k, v in dict_.items():
+        for k, v in list(dict_.items()):
             self.__setitem__(k, v)
 
     def setdefault(self, key, default):
@@ -109,7 +109,7 @@
         Replace the normal dict.__repr__ with a version that returns the keys
         in their sorted order.
         """
-        return '{%s}' % ', '.join(['%r: %r' % (k, v) for k, v in self.items()])
+        return '{%s}' % ', '.join(['%r: %r' % (k, v) for k, v in list(self.items())])
 
     def clear(self):
         super(OrderedDict, self).clear()
--- ./markdown/treeprocessors.py (original)
+++ ./markdown/treeprocessors.py (refactored)
@@ -3,7 +3,7 @@
 
 def isString(s):
     """ Check if it's string """
-    return isinstance(s, unicode) or isinstance(s, str)
+    return isinstance(s, str) or isinstance(s, str)
 
 class Processor:
     def __init__(self, markdown_instance=None):
--- ./markdown/extensions/footnotes.py (original)
+++ ./markdown/extensions/footnotes.py (refactored)
@@ -114,7 +114,7 @@
     def makeFootnotesDiv(self, root):
         """ Return div of footnotes as et Element. """
 
-        if not self.footnotes.keys():
+        if not list(self.footnotes.keys()):
             return None
 
         div = etree.Element("div")
@@ -122,7 +122,7 @@
         hr = etree.SubElement(div, "hr")
         ol = etree.SubElement(div, "ol")
 
-        for id in self.footnotes.keys():
+        for id in list(self.footnotes.keys()):
             li = etree.SubElement(ol, "li")
             li.set("id", self.makeFootnoteId(id))
             self.parser.parseChunk(li, self.footnotes[id])
--- ./markdown/extensions/headerid.py (original)
+++ ./markdown/extensions/headerid.py (refactored)
@@ -126,9 +126,9 @@
         level = int(self.config['level'][0]) - 1
         force = self._str2bool(self.config['forceid'][0])
         if hasattr(self.md, 'Meta'):
-            if self.md.Meta.has_key('header_level'):
+            if 'header_level' in self.md.Meta:
                 level = int(self.md.Meta['header_level'][0]) - 1
-            if self.md.Meta.has_key('header_forceid'): 
+            if 'header_forceid' in self.md.Meta: 
                 force = self._str2bool(self.md.Meta['header_forceid'][0])
         return level, force
 
--- ./markdown/extensions/html_tidy.py (original)
+++ ./markdown/extensions/html_tidy.py (refactored)
@@ -54,7 +54,7 @@
     def run(self, text):
         # Pass text to Tidy. As Tidy does not accept unicode we need to encode
         # it and decode its return value.
-        return unicode(tidy.parseString(text.encode('utf-8'), 
+        return str(tidy.parseString(text.encode('utf-8'), 
                                         **self.markdown.tidy_options)) 
 
 
--- ./markdown/extensions/imagelinks.py (original)
+++ ./markdown/extensions/imagelinks.py (refactored)
@@ -83,7 +83,7 @@
                     new_block += "</span>"
                     new_block += SLIDESHOW_LINK % url.get_slideshow()
 
-                    album_urls = album_url_hash.keys()
+                    album_urls = list(album_url_hash.keys())
                     album_urls.sort()
 
                     if len(album_urls) == 1:
--- ./markdown/extensions/toc.py (original)
+++ ./markdown/extensions/toc.py (refactored)
@@ -124,7 +124,7 @@
         """ Slugify a string, to make it URL friendly. """
         import unicodedata
         value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
-        value = unicode(re.sub('[^\w\s-]', '', value).strip().lower())
+        value = str(re.sub('[^\w\s-]', '', value).strip().lower())
         return re.sub('[-\s]+','-',value)
 
     def extendMarkdown(self, md, md_globals):
--- ./markdown/extensions/wikilinks.py (original)
+++ ./markdown/extensions/wikilinks.py (refactored)
@@ -136,11 +136,11 @@
         end_url = self.config['end_url'][0]
         html_class = self.config['html_class'][0]
         if hasattr(self.md, 'Meta'):
-            if self.md.Meta.has_key('wiki_base_url'):
+            if 'wiki_base_url' in self.md.Meta:
                 base_url = self.md.Meta['wiki_base_url'][0]
-            if self.md.Meta.has_key('wiki_end_url'):
+            if 'wiki_end_url' in self.md.Meta:
                 end_url = self.md.Meta['wiki_end_url'][0]
-            if self.md.Meta.has_key('wiki_html_class'):
+            if 'wiki_html_class' in self.md.Meta:
                 html_class = self.md.Meta['wiki_html_class'][0]
         return base_url, end_url, html_class
     
